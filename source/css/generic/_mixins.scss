//======================================//
//    $MIXINS                           //
//======================================//

// Convert pixel based font-size to rem unit
// eg: @include font-size(16px);
@mixin font-size($font-size) {
    font-size: ( $font-size / $base-font-size ) * 1em;
}


// Create vendor-prefixed CSS in one go, e.g.
// eg: @include vendor(border-radius, 4px);
@mixin vendor($property, $value...){
    -webkit-#{$property}:$value;
       -moz-#{$property}:$value;
        -ms-#{$property}:$value;
         -o-#{$property}:$value;
            #{$property}:$value;
}


// Create CSS keyframe animations for all vendors in one go, 
//Courtesy of @integralist: twitter.com/integralist/status/260484115315437569
// eg:
//  .foo{
//       @include vendor(animation, shrink 3s);
//   }

//   @include keyframe(shrink){
//       from{
//           font-size:5em;
//       }
//   }
@mixin keyframe ($animation-name){
    @-webkit-keyframes $animation-name{
        @content;
    }

    @-moz-keyframes $animation-name{
        @content;
    }

    @-ms-keyframes $animation-name{
        @content;
    }

    @-o-keyframes $animation-name{
        @content;
    }

    @keyframes $animation-name{
        @content;
    }
}


// Force overly long spans of text to truncate
// eg: @include truncate(100%);
@mixin truncate($truncation-boundary) {
    max-width: $truncation-boundary;
    white-space:nowrap;
    overflow:hidden;
    text-overflow:ellipsis;
}


// Create responsive media query from px value breakpoints
//
// $width - determins min or max width for media query
// options: min-width, max-width
//
// $px-val - a pixel based value that gets converted into ems
// options: px values stored in variables in site-settings.scss
//
// eg: @include respond-to($lap-end, max-width); 
@mixin respond-to($px-val, $width: min-width) {

  $flex-unit: ($px-val / $base-font-size) * 1em;
  
  @media screen and (#{$width}: #{$flex-unit}) {
    @content;
  }
}


/*
 * Convert pixel values to rem values for whatever property is passed to it, e.g.: 
 * rem() - bitmanic
 * https://github.com/bitmanic/rem
 * 
    .element {
        @include rem('padding',10px 0 2px 5px);
    }
 *
 * It returns two lines of code â€” one of the regular pixel values (for some older browsers), and another with the converted rem values (for everyone else).
 *
    .element {
        padding: 10px 0 2px 5px;
        padding: 1rem 0 0.2rem 0.5rem;
    }
 *
 * Special thanks to Chris Epstein (http://chriseppstein.github.com) and Martin Bavio (http://martinbavio.com) for the help and code!

 * Baseline, measured in pixels
 * The value should be the same as the font-size value for the html element
 * If the html element's font-size is set to 62.5% (of the browser's default font-size of 16px),
 * then the variable below would be 10px.
 */
$baseline-px: $base-font-size;

@mixin rem($property, $px-values) {
  // Convert the baseline into rems
  $baseline-rem: $baseline-px / 1rem;
  // Print the first line in pixel values
  #{$property}: $px-values;
  // If there is only one (numeric) value, return the property/value line for it.
  @if type-of($px-values) == "number" {
    #{$property}: $px-values / $baseline-rem; }
  @else {
    // Create an empty list that we can dump values into
    $rem-values: unquote("");
    @each $value in $px-values {
      // If the value is zero, return 0
      @if $value == 0 {
        $rem-values: append($rem-values, $value); }
      @else {
        $rem-values: append($rem-values, $value / $baseline-rem); } }
    // Return the property and its list of converted values
    #{$property}: $rem-values; } 
}